tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
tag_matrix <- tag_matrix + 1
library(poLCA)
formula <- as.formula(paste("cbind(", paste(names(tag_matrix), collapse = ", "), ") ~ 1"))
lca_model <- poLCA(formula, data = tag_matrix, nclass = 10, maxiter = 1000)
conditional_probs <- lca_model$probs
print(conditional_probs)
View(tag_matrix)
tags_by_class
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
set.seed(10)
lca_model <- poLCA(formula, data = tag_matrix, nclass = 8, maxiter = 1000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
lca_model <- poLCA(formula, data = tag_matrix, nclass = 9, maxiter = 1000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
lca_model <- poLCA(formula, data = tag_matrix, nclass = 11, maxiter = 1000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
lca_model <- poLCA(formula, data = tag_matrix, nclass = 9, maxiter = 5000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
lca_model <- poLCA(formula, data = tag_matrix, nclass = 8, maxiter = 5000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
lca_model <- poLCA(formula, data = tag_matrix, nclass = 7, maxiter = 5000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
lca_model <- poLCA(formula, data = tag_matrix, nclass = 7, nrep = 3,maxiter = 5000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
formula
tags_by_class
lca_model$bic
formula
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)                 # Remove curly braces
items <- strsplit(x, ", ")[[1]]
return(items)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
tag_matrix <- tag_matrix + 1
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)                 # Remove curly braces
items <- strsplit(x, ", ")[[1]]
return(items)
})
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)                 # Remove curly braces
items <- strsplit(x, ", ")[[1]]
return(items)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
tag_matrix <- tag_matrix + 1
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)                 # Remove curly braces
items <- strsplit(x, ", ")[[1]]
return(items)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
tag_matrix <- tag_matrix + 1
library(poLCA)
formula <- as.formula(paste("cbind(", paste(names(tag_matrix), collapse = ", "), ") ~ 1"))
lca_model <- poLCA(formula, data = tag_matrix, nclass = 7, nrep = 3, maxiter = 5000)
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
names(tag_matrix) <- make.names(names(tag_matrix))
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
set.seed(10)
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)                 # Remove curly braces
items <- strsplit(x, ", ")[[1]]
return(items)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
names(tag_matrix) <- make.names(names(tag_matrix))
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
tag_matrix <- tag_matrix + 1
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
set.seed(10)
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)                 # Remove curly braces
items <- strsplit(x, ", ")[[1]]
return(items)
})
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
set.seed(10)
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)
items <- strsplit(x, ", ")[[1]]
return(items)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)
x <- gsub("[ ]", "_", x)
items <- strsplit(x, ", ")[[1]]
return(items)
})
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("[{}]", "", x)
items <- strsplit(x, ", ")[[1]]
return(items)
})
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
set.seed(10)
data$Tags <- lapply(data$Tags, function(x) {
x <- gsub("{", "", x)
x <- gsub("}", "", x)
items <- strsplit(x, ", ")[[1]]
return(items)
})
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
Hereâ€™s how you can handle it:
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
set.seed(10)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub("[{}']", "", tag_set)
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub("[{}']", "", tag_set)
clean_string <- gsub(" ", "_", tag_set)
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
set.seed(10)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub("[{}']", "", tag_set)
clean_string <- gsub(" ", "_", tag_set)
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
set.seed(10)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub(" ", "_", gsub("[{}']", "", tag_set))
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub("[{}']", "", tag_set)
# Trim leading/trailing whitespace
clean_string <- trimws(clean_string)
# Replace spaces with underscores
clean_string <- gsub(" ", "_", clean_string)
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
set.seed(10)
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub(" ", "_", gsub("[{}']", "", tag_set))
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
tag_matrix <- tag_matrix + 1
library(poLCA)
formula <- as.formula(paste("cbind(", paste(names(tag_matrix), collapse = ", "), ") ~ 1"))
lca_model <- poLCA(formula, data = tag_matrix, nclass = 7, nrep = 3, maxiter = 5000)
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub("[{}']", "", tag_set)
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
all_tags <- unique(unlist(data$Tags))
set.seed(10)
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub("[{}']", "", tag_set)
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
tag_matrix <- tag_matrix + 1
library(poLCA)
formula <- as.formula(paste("cbind(", paste(names(tag_matrix), collapse = ", "), ") ~ 1"))
lca_model <- poLCA(formula, data = tag_matrix, nclass = 7, nrep = 3, maxiter = 5000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
set.seed(10)
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub("[{}']", "", tag_set)
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
tag_matrix <- tag_matrix + 1
library(poLCA)
formula <- as.formula(paste("cbind(", paste(names(tag_matrix), collapse = ", "), ") ~ 1"))
lca_model <- poLCA(formula, data = tag_matrix, nclass = 7, nrep = 3, maxiter = 5000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]  # Extract probabilities for "present" (2) for each class
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
set.seed(10)
data <- read.csv("data_parsed.csv", stringsAsFactors = FALSE)
data$Tags <- lapply(data$Tags, function(tag_set) {
# Remove curly braces and single quotes
clean_string <- gsub("[{}']", "", tag_set)
# Split by commas and trim whitespace
tag_list <- trimws(strsplit(clean_string, ",")[[1]])
# Return the tag list
return(tag_list)
})
all_tags <- unique(unlist(data$Tags))
tag_matrix <- sapply(all_tags, function(tag) {
sapply(data$Tags, function(tags) {
as.integer(tag %in% tags)
})
})
colnames(tag_matrix) <- all_tags
tag_matrix <- as.data.frame(tag_matrix)
tag_matrix <- as.data.frame(lapply(tag_matrix, as.integer))
tag_matrix <- tag_matrix + 1
library(poLCA)
formula <- as.formula(paste("cbind(", paste(names(tag_matrix), collapse = ", "), ") ~ 1"))
lca_model <- poLCA(formula, data = tag_matrix, nclass = 8, nrep = 3, maxiter = 5000)
conditional_probs <- lca_model$probs
tag_class_probs <- sapply(conditional_probs, function(tag_probs) {
tag_probs[, "Pr(2)"]
})
tag_to_class <- apply(tag_class_probs, 2, which.max)
tags_by_class <- split(names(tag_to_class), tag_to_class)
tags_by_class
cluster_tags <- list(
Love_and_Romance = c("Realistic_and_Complicated", "Men_and_Women", "Heartache_and_Loss", "Love",
"Gay_Lesbian_and_Queer", "Desire", "Break.ups_and_Vexed_Love", "Separation_and_Divorce",
"Infatuation_and_Crushes", "Marriage_and_Companionship", "Romantic_Love", "Unrequited_Love",
"First_Love", "Valentine's_Day.", "Weddings", "Classic_Love", "Engagement", "Anniversary"),
Social_and_Cultural_Commentary = c("Social_Commentaries", "Youth", "Race_and_Ethnicity", "Crime_and_Punishment",
"Popular_Culture", "Gender_and_Sexuality", "Town_and_Country_Life", "Memorial_Day",
"Islam", "Labor_Day", "September_11th"),
History_and_Politics = c("History_and_Politics", "War_and_Conflict", "Money_and_Economics", "Class",
"Cities_and_Urban_Life", "Heroes_and_Patriotism", "Independence_Day", "Kwanzaa",
"Cinco_de_Mayo"),
Life_and_Spirituality = c("Living", "Time_and_Brevity", "The_Spiritual", "The_Body", "The_Mind", "Life_Choices",
"Death", "Birth_and_Birthdays", "Health_and_Illness", "Growing_Old",
"Disappointment_and_Failure", "Graduation", "Yom_Kippur", "Passover", "Easter",
"Get_Well_and_Recovery", "Midlife", "Funerals", "Birthdays", "Toasts_and_Celebrations",
"Gratitude_and_Apologies", "Birth"),
Relationships_and_Family = c("Relationships", "Family_and_Ancestors", "Parenthood", "Infancy", "Coming_of_Age",
"Sorrow_and_Grieving", "Pets", "Home_Life", "Friends_and_Enemies", "Philosophy",
"Mother's_Day.", "Fathers_Day."),
Arts_Culture_and_Beliefs = c("Fairy.tales_and_Legends", "Religion", "Mythology_and_Folklore", "Humor_and_Satire",
"Faith_and_Doubt", "Poetry_and_Poets", "Language_and_Linguistics",
"Painting_and_Sculpture", "Photography_and_Film", "Arts_and_Sciences", "Reading_and_Books",
"Music", "God_and_the_Divine", "Christianity", "Ghosts_and_the_Supernatural",
"Judaism", "Theater_and_Dance", "Other_Religions", "Greek_and_Roman_Mythology",
"Horror", "Architecture_and_Design", "Christmas", "Hanukkah", "Ramadan"),
Nature_and_the_Outdoors = c("Nature", "Seas_Rivers_and_Streams", "Landscapes_and_Pastorals", "Trees_and_Flowers",
"Animals", "Weather", "Spring", "Winter", "Stars_Planets_and_Heavens", "Fall",
"Summer", "Halloween", "Rosh_Hashanah"),
Activities_and_Daily_Life = c("Travels_and_Journeys", "Jobs_and_Working", "Eating_and_Drinking",
"Sports_and_Outdoor_Activities", "School_and_Learning", "Sciences", "Activities",
"Gardening", "Indoor_Activities", "New_Year", "Farewells_and_Good_Luck", "Buddhism",
"St._Patrick's_Day.", "Thanksgiving")
)
# Install and load the jsonlite package if you don't have it installed
if (!require(jsonlite)) install.packages("jsonlite", dependencies = TRUE)
library(jsonlite)
# Export the cluster_tags list to a JSON file
write_json(cluster_tags, "cluster_tags.json", pretty = TRUE)
reversed_tags <- list()
# Loop over each cluster and its associated tags
for (cluster in names(cluster_tags)) {
for (tag in cluster_tags[[cluster]]) {
reversed_tags[[tag]] <- cluster  # Set the tag as the key, and the cluster name as the value
}
}
# Print the result
print(reversed_tags)
# Install and load the jsonlite package if you don't have it installed
if (!require(jsonlite)) install.packages("jsonlite", dependencies = TRUE)
library(jsonlite)
# Export the cluster_tags list to a JSON file
write_json(reversed_tags, "cluster_tags.json", pretty = TRUE)
# Print the result
print(reversed_tags)
cluster_tags
reversed_tags
swapped_tags <- unlist(lapply(cluster_tags, function(x) setNames(rep(names(x), length(x)), make.names(x))))
cluster_tags <- list(
Love_and_Romance = c("Realistic_and_Complicated", "Men_and_Women", "Heartache_and_Loss", "Love",
"Gay_Lesbian_and_Queer", "Desire", "Break.ups_and_Vexed_Love", "Separation_and_Divorce",
"Infatuation_and_Crushes", "Marriage_and_Companionship", "Romantic_Love", "Unrequited_Love",
"First_Love", "Valentine's_Day.", "Weddings", "Classic_Love", "Engagement", "Anniversary"),
Social_and_Cultural_Commentary = c("Social_Commentaries", "Youth", "Race_and_Ethnicity", "Crime_and_Punishment",
"Popular_Culture", "Gender_and_Sexuality", "Town_and_Country_Life", "Memorial_Day",
"Islam", "Labor_Day", "September_11th"),
History_and_Politics = c("History_and_Politics", "War_and_Conflict", "Money_and_Economics", "Class",
"Cities_and_Urban_Life", "Heroes_and_Patriotism", "Independence_Day", "Kwanzaa",
"Cinco_de_Mayo"),
Life_and_Spirituality = c("Living", "Time_and_Brevity", "The_Spiritual", "The_Body", "The_Mind", "Life_Choices",
"Death", "Birth_and_Birthdays", "Health_and_Illness", "Growing_Old",
"Disappointment_and_Failure", "Graduation", "Yom_Kippur", "Passover", "Easter",
"Get_Well_and_Recovery", "Midlife", "Funerals", "Birthdays", "Toasts_and_Celebrations",
"Gratitude_and_Apologies", "Birth"),
Relationships_and_Family = c("Relationships", "Family_and_Ancestors", "Parenthood", "Infancy", "Coming_of_Age",
"Sorrow_and_Grieving", "Pets", "Home_Life", "Friends_and_Enemies", "Philosophy",
"Mother's_Day.", "Fathers_Day."),
Arts_Culture_and_Beliefs = c("Fairy.tales_and_Legends", "Religion", "Mythology_and_Folklore", "Humor_and_Satire",
"Faith_and_Doubt", "Poetry_and_Poets", "Language_and_Linguistics",
"Painting_and_Sculpture", "Photography_and_Film", "Arts_and_Sciences", "Reading_and_Books",
"Music", "God_and_the_Divine", "Christianity", "Ghosts_and_the_Supernatural",
"Judaism", "Theater_and_Dance", "Other_Religions", "Greek_and_Roman_Mythology",
"Horror", "Architecture_and_Design", "Christmas", "Hanukkah", "Ramadan"),
Nature_and_the_Outdoors = c("Nature", "Seas_Rivers_and_Streams", "Landscapes_and_Pastorals", "Trees_and_Flowers",
"Animals", "Weather", "Spring", "Winter", "Stars_Planets_and_Heavens", "Fall",
"Summer", "Halloween", "Rosh_Hashanah"),
Activities_and_Daily_Life = c("Travels_and_Journeys", "Jobs_and_Working", "Eating_and_Drinking",
"Sports_and_Outdoor_Activities", "School_and_Learning", "Sciences", "Activities",
"Gardening", "Indoor_Activities", "New_Year", "Farewells_and_Good_Luck", "Buddhism",
"St._Patrick's_Day.", "Thanksgiving")
)
swapped_tags <- unlist(lapply(cluster_tags, function(x) setNames(rep(names(x), length(x)), make.names(x))))
swapped_tags <- unlist(lapply(cluster_tags, function(x) {
if(length(x) > 0) {
# Swapping keys and values while removing special characters from keys
setNames(rep(names(x), length(x)), make.names(x))
} else {
# In case of empty vectors, return NULL or an empty list
NULL
}
}), recursive = FALSE)
cluster_tags <- list(
Love_and_Romance = c("Realistic_and_Complicated", "Men_and_Women", "Heartache_and_Loss", "Love",
"Gay_Lesbian_and_Queer", "Desire", "Break.ups_and_Vexed_Love", "Separation_and_Divorce",
"Infatuation_and_Crushes", "Marriage_and_Companionship", "Romantic_Love", "Unrequited_Love",
"First_Love", "Valentine's_Day.", "Weddings", "Classic_Love", "Engagement", "Anniversary"),
Social_and_Cultural_Commentary = c("Social_Commentaries", "Youth", "Race_and_Ethnicity", "Crime_and_Punishment",
"Popular_Culture", "Gender_and_Sexuality", "Town_and_Country_Life", "Memorial_Day",
"Islam", "Labor_Day", "September_11th"),
History_and_Politics = c("History_and_Politics", "War_and_Conflict", "Money_and_Economics", "Class",
"Cities_and_Urban_Life", "Heroes_and_Patriotism", "Independence_Day", "Kwanzaa",
"Cinco_de_Mayo"),
Life_and_Spirituality = c("Living", "Time_and_Brevity", "The_Spiritual", "The_Body", "The_Mind", "Life_Choices",
"Death", "Birth_and_Birthdays", "Health_and_Illness", "Growing_Old",
"Disappointment_and_Failure", "Graduation", "Yom_Kippur", "Passover", "Easter",
"Get_Well_and_Recovery", "Midlife", "Funerals", "Birthdays", "Toasts_and_Celebrations",
"Gratitude_and_Apologies", "Birth"),
Relationships_and_Family = c("Relationships", "Family_and_Ancestors", "Parenthood", "Infancy", "Coming_of_Age",
"Sorrow_and_Grieving", "Pets", "Home_Life", "Friends_and_Enemies", "Philosophy",
"Mother's_Day.", "Fathers_Day."),
Arts_Culture_and_Beliefs = c("Fairy.tales_and_Legends", "Religion", "Mythology_and_Folklore", "Humor_and_Satire",
"Faith_and_Doubt", "Poetry_and_Poets", "Language_and_Linguistics",
"Painting_and_Sculpture", "Photography_and_Film", "Arts_and_Sciences", "Reading_and_Books",
"Music", "God_and_the_Divine", "Christianity", "Ghosts_and_the_Supernatural",
"Judaism", "Theater_and_Dance", "Other_Religions", "Greek_and_Roman_Mythology",
"Horror", "Architecture_and_Design", "Christmas", "Hanukkah", "Ramadan"),
Nature_and_the_Outdoors = c("Nature", "Seas_Rivers_and_Streams", "Landscapes_and_Pastorals", "Trees_and_Flowers",
"Animals", "Weather", "Spring", "Winter", "Stars_Planets_and_Heavens", "Fall",
"Summer", "Halloween", "Rosh_Hashanah"),
Activities_and_Daily_Life = c("Travels_and_Journeys", "Jobs_and_Working", "Eating_and_Drinking",
"Sports_and_Outdoor_Activities", "School_and_Learning", "Sciences", "Activities",
"Gardening", "Indoor_Activities", "New_Year", "Farewells_and_Good_Luck", "Buddhism",
"St._Patrick's_Day.", "Thanksgiving")
)
cluster_tags
reversed_tags <- list()
